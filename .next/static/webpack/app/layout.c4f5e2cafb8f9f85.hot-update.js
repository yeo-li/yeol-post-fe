"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"5cfa0015a956\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy95ZW9saS9naXQveWVvbC1wb3N0LWZlL2FwcC9nbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjVjZmEwMDE1YTk1NlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deletePost: () => (/* binding */ deletePost),\n/* harmony export */   fetchAboutMe: () => (/* binding */ fetchAboutMe),\n/* harmony export */   fetchAllDraftPosts: () => (/* binding */ fetchAllDraftPosts),\n/* harmony export */   fetchAllPosts: () => (/* binding */ fetchAllPosts),\n/* harmony export */   fetchCategoriesAndPostsCount: () => (/* binding */ fetchCategoriesAndPostsCount),\n/* harmony export */   fetchCategoriesRecent: () => (/* binding */ fetchCategoriesRecent),\n/* harmony export */   fetchDeleteCategory: () => (/* binding */ fetchDeleteCategory),\n/* harmony export */   fetchDraft: () => (/* binding */ fetchDraft),\n/* harmony export */   fetchHistories: () => (/* binding */ fetchHistories),\n/* harmony export */   fetchInterests: () => (/* binding */ fetchInterests),\n/* harmony export */   fetchLoginInformation: () => (/* binding */ fetchLoginInformation),\n/* harmony export */   fetchPost: () => (/* binding */ fetchPost),\n/* harmony export */   fetchPublishDraftPost: () => (/* binding */ fetchPublishDraftPost),\n/* harmony export */   fetchRecentPosts: () => (/* binding */ fetchRecentPosts),\n/* harmony export */   fetchSaveCategory: () => (/* binding */ fetchSaveCategory),\n/* harmony export */   fetchSaveDraftPost: () => (/* binding */ fetchSaveDraftPost),\n/* harmony export */   fetchSavePost: () => (/* binding */ fetchSavePost),\n/* harmony export */   fetchStatics: () => (/* binding */ fetchStatics),\n/* harmony export */   fetchUpdateCategory: () => (/* binding */ fetchUpdateCategory),\n/* harmony export */   fetchUpdateDraftPost: () => (/* binding */ fetchUpdateDraftPost),\n/* harmony export */   fetchUpdatePost: () => (/* binding */ fetchUpdatePost)\n/* harmony export */ });\nconst APP_API_URL = \"https://api.yeo-li.com\";\nasync function fetchLoginInformation() {\n    try {\n        const response = await fetch(\"\".concat(APP_API_URL, \"/api/v1/admins/me\"), {\n            credentials: 'include'\n        });\n        const data = await response.json();\n        if (data.isLoggedIn) {\n            return {\n                isLoggedIn: true,\n                user: data\n            };\n        } else {\n            return {\n                isLoggedIn: false\n            };\n        }\n    } catch (err) {\n        console.error('에러 발생:', err);\n    }\n}\nasync function fetchUpdatePost(postId, data) {\n    try {\n        const response = await fetch(\"\".concat(APP_API_URL, \"/api/v1/posts/\").concat(postId), {\n            method: \"PATCH\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            return await response.json();\n        } else {\n            return {\n                success: true,\n                message: \"게시물이 성공적으로 업데이트되었습니다.\"\n            };\n        }\n    } catch (err) {\n        console.error(\"게시글 수정 실패:\", err);\n        throw err;\n    }\n}\nasync function fetchUpdateDraftPost(postId, data) {\n    try {\n        const response = await fetch(\"\".concat(APP_API_URL, \"/api/v1/drafts/\").concat(postId), {\n            method: \"PATCH\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            return await response.json();\n        } else {\n            return {\n                success: true,\n                message: \"게시물이 성공적으로 업데이트되었습니다.\"\n            };\n        }\n    } catch (err) {\n        console.error(\"게시글 수정 실패:\", err);\n        throw err;\n    }\n}\nasync function fetchRecentPosts() {\n    // 본문 제외 모든 정보가 필요함.\n    // 최근 6개의 글만 가져오기\n    try {\n        const response = await fetch('${APP_API_URL}/api/v1/posts?limit=6&is_published=true', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        console.log(json);\n        return json;\n    } catch (err) {\n        console.error('게시글 불러오기 실패:', err);\n        return [];\n    }\n}\nasync function fetchCategoriesAndPostsCount() {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/v1/categories\", {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        return json.result;\n    } catch (err) {\n        console.error('카테고리 불러오기 실패:', err);\n        return [];\n    }\n/**\n     {\n     “total_categories_count”: 4\n     “categories”: [\n     {\n     “category_id”: 1,\n     “category_name”: “개발”,\n     “post_count”: 8\n     },\n     ]\n     }\n     */ }\nasync function fetchPost(param) {\n    let { postId } = param;\n    try {\n        const response = await fetch('http://localhost:8080/api/v1/posts', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        return json.result.find((post)=>Number(post.postId) === Number(postId));\n    } catch (err) {\n        console.error('게시글 불러오기 실패:', err);\n        return [];\n    }\n}\nasync function fetchDraft(param) {\n    let { postId } = param;\n    try {\n        const response = await fetch('http://localhost:8080/api/v1/drafts', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        return json.result.find((post)=>Number(post.postId) === Number(postId));\n    } catch (err) {\n        console.error('임시 저장 게시글 불러오기 실패:', err);\n        return [];\n    }\n}\nasync function fetchAllPosts() {\n    try {\n        const response = await fetch('http://localhost:8080/api/v1/posts?is_published=true', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 불러오기 실패:', err);\n        return [];\n    }\n}\nasync function fetchAllDraftPosts() {\n    try {\n        const response = await fetch('http://localhost:8080/api/v1/drafts', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 불러오기 실패:', err);\n        return [];\n    }\n}\nasync function fetchCategoriesRecent() {\n    try {\n        const response = await fetch('http://localhost:8080/api/v1/categories/recent', {\n            method: 'GET',\n            credentials: 'include'\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 불러오기 실패:', err);\n        return [];\n    }\n/*\n    [\n        {\n\t\t“category_id”: 1,\n\t\t“category_name”: “개발”,\n“category_description”: “웹 개발, 프로그래밍 언어, 프레임워크 등… ”,\n“post_count”: 8,\n\t\t“recent_post”: {\n    “post_id”: 1,\n\t\t\t“title”: “React 18의 새로운 기능들 살펴보기”,\n    “published_at”: 2025-22-23\n    }\n},\n]\n    */ }\nasync function fetchAboutMe() {\n/*\n    {\n\t“”about_me”: “안녕하세요~ 박성열입니다.”\n}\n     */ }\nasync function fetchInterests() {\n/*\n    [\n\t{\n\t\t“tech”: “React”,\n\t\t“level”: “중급”\n\t},\n]\n     */ }\nasync function fetchHistories() {\n/*\n    [\n\t{\n\t\t“title”: “백엔드 개발자”,\n\t\t“start_date”: 2022-05-22,\n\t\t“end_date”: null,\n\t\t“description”: “React, Next.js를 사용한 웹 애플리케이션 개발”\n\t},\n]\n     */ }\nasync function fetchStatics() {\n/*\n    {\n\t“total_post_count”: 28,\n\t“total_categories_count”: 4\n}\n     */ }\nasync function fetchSavePost(data) {\n    try {\n        console.log(data);\n        const response = await fetch('http://localhost:8080/api/v1/posts', {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 저장 실패:', err);\n        return [];\n    }\n}\nasync function fetchSaveCategory(data) {\n    try {\n        console.log(data);\n        const response = await fetch('http://localhost:8080/api/v1/categories', {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('카테고리 저장 실패:', err);\n        return [];\n    }\n}\nasync function fetchSaveDraftPost(data) {\n    try {\n        console.log(data);\n        const response = await fetch('http://localhost:8080/api/v1/drafts', {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 저장 실패:', err);\n        return [];\n    }\n}\nasync function deletePost(postId) {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/v1/posts/\".concat(postId), {\n            method: \"DELETE\",\n            credentials: \"include\"\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        // DELETE 요청은 보통 응답 본문이 없거나 간단한 상태만 반환\n        // 응답이 있다면 JSON으로 파싱, 없다면 성공 객체 반환\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            const json = await response.json();\n            return json;\n        } else {\n            return {\n                success: true,\n                message: \"게시물이 성공적으로 삭제되었습니다.\"\n            };\n        }\n    } catch (err) {\n        console.error(\"게시글 삭제 실패:\", err);\n        throw err;\n    }\n}\nasync function fetchPublishDraftPost(postId) {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/v1/drafts/\".concat(postId, \"/publish\"), {\n            method: 'POST',\n            credentials: 'include',\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const json = await response.json();\n        console.log(json.result);\n        return json.result;\n    } catch (err) {\n        console.error('게시글 저장 실패:', err);\n        return [];\n    }\n}\nasync function fetchDeleteCategory(categoryId) {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/v1/categories/\".concat(categoryId), {\n            method: \"DELETE\",\n            credentials: \"include\"\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        // DELETE 요청은 보통 응답 본문이 없거나 간단한 상태만 반환\n        // 응답이 있다면 JSON으로 파싱, 없다면 성공 객체 반환\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            const json = await response.json();\n            return json;\n        } else {\n            return {\n                success: true,\n                message: \"게시물이 성공적으로 삭제되었습니다.\"\n            };\n        }\n    } catch (err) {\n        console.error(\"게시글 삭제 실패:\", err);\n        throw err;\n    }\n}\nasync function fetchUpdateCategory(categoryId, data) {\n    try {\n        const response = await fetch(\"http://localhost:8080/api/v1/categories/\".concat(categoryId), {\n            method: \"PATCH\",\n            credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n            return await response.json();\n        } else {\n            return {\n                success: true,\n                message: \"카테고리가 성공적으로 업데이트되었습니다.\"\n            };\n        }\n    } catch (err) {\n        console.error(\"카테고리 수정 실패:\", err);\n        throw err;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});